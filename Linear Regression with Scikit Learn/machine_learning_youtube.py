# -*- coding: utf-8 -*-
"""Machine Learning Youtube.ipynb

Automatically generated by Colab.

QUESTION: ACME Insurance Inc. offers affordable health insurance to thousands of customer all over the United States. As the lead data scientist at ACME, you're tasked with creating an automated system to estimate the annual medical expenditure for new customers, using information such as their age, sex, BMI, children, smoking habits and region of residence.

Estimates from your system will be used to determine the annual insurance premium (amount paid every month) offered to the customer. Due to regulatory requirements, you must be able to explain why your system outputs a certain prediction.

ALL GRAPHS ARE IN THE PREVIOUS FOLDER

"""

!pip install pandas-profiling --quiet

medical_charges_url = 'https://raw.githubusercontent.com/JovianML/opendatasets/master/data/medical-charges.csv'

from urllib.request import urlretrieve

urlretrieve(medical_charges_url, 'medical.csv')

import pandas as pd

medical_df = pd.read_csv('medical.csv')
medical_df

medical_df.info()

"""
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1338 entries, 0 to 1337
Data columns (total 7 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   age       1338 non-null   int64  
 1   sex       1338 non-null   object 
 2   bmi       1338 non-null   float64
 3   children  1338 non-null   int64  
 4   smoker    1338 non-null   object 
 5   region    1338 non-null   object 
 6   charges   1338 non-null   float64
dtypes: float64(2), int64(2), object(3)
memory usage: 73.3+ KB


age, bmi, children, and charges are numbers while the rest are objects or strings

non-null = 1338 -> none of the columns have no data
"""

medical_df.describe()

"""
	age	bmi	children	charges
count	1338.000000	1338.000000	1338.000000	1338.000000
mean	39.207025	30.663397	1.094918	13270.422265
std	14.049960	6.098187	1.205493	12110.011237
min	18.000000	15.960000	0.000000	1121.873900
25%	27.000000	26.296250	0.000000	4740.287150
50%	39.000000	30.400000	1.000000	9382.033000
75%	51.000000	34.693750	2.000000	16639.912515
max	64.000000	53.130000	5.000000	63770.428010

Inferences from the table:
1. Patient ages are from 18 to 64
2. Whole number for the amount of children
3. No negative age
4. No negative charges
5. Max children is in possible range

"""

!pip install jovian --quiet

import jovian

!pip install plotly matplotlib seaborn --quiet

# Commented out IPython magic to ensure Python compatibility.
import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 12
matplotlib.rcParams['figure.figsize'] = (10, 6)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

medical_df.age.describe()

fig = px.histogram(medical_df,
                   x='age',
                   marginal='box',
                   nbins=47,
                   title='Distribution of Age')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(medical_df,
                   x='bmi',
                   marginal='box',
                   color_discrete_sequence=['red'],
                   title='Distribution of BMI (Body Mass Index)')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(medical_df,
                   x='charges',
                   marginal='box',
                   color='smoker',
                   color_discrete_sequence=['green', 'grey'],
                   title='Annual Medical Charges')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(medical_df,
                   x='children',
                   marginal='box',
                   color_discrete_sequence=['purple'],
                   title='Distribution of Children')
fig.update_layout(bargap=0.1)
fig.show()

medical_df.smoker.value_counts()

px.histogram(medical_df, x='smoker', color='sex', title='Smoker')

px.histogram(medical_df, x='smoker', color='region', title='Smoker')

px.histogram(medical_df, x='smoker', color='children', title='Smoker')

px.histogram(medical_df, x='smoker', color='age', title='Smoker')

fig = px.scatter(medical_df,
                 x='age',
                 y='charges',
                 color='smoker',
                 opacity=0.8,
                 hover_data=['sex'],
                 title='Age vs. Charges')
fig.update_traces(marker_size=5)
fig.show()

fig = px.scatter(medical_df,
                 x='bmi',
                 y='charges',
                 color='smoker',
                 opacity=0.8,
                 hover_data=['sex'],
                 title='BMI vs. Charges')
fig.update_traces(marker_size=5)
fig.show()

fig = px.violin(medical_df,
                 x='children',
                 y='charges',
                 color='smoker',
                 #opacity=0.8,
                 hover_data=['sex'],
                 title='Children vs. Charges')
fig.update_traces(marker_size=5)
fig.show()

medical_df.charges.corr(medical_df.age)

medical_df.charges.corr(medical_df.bmi)

smoker_values = {'no': 0, 'yes': 1}
smoker_numeric = medical_df.smoker.map(smoker_values)
medical_df.charges.corr(smoker_numeric)

medical_df.corr()
